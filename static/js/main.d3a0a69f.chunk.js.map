{"version":3,"sources":["API/CovidInfoService.js","components/Loading.jsx","components/DateRangePicker.jsx","components/CustomPagination.jsx","utils/sortUtils.js","utils/covidInfoUtils.js","utils/dateUtils.js","utils/validationUtils.js","classes/CountryCovidInfo.js","components/CovidTable.jsx","utils/paginationUtils.js","components/CovidChart.jsx","App.js","hooks/useFetching.js","index.js"],"names":["CovidInfoService","this","GetDataFromServer","data","console","warn","error","GetDataFromLocal","covidInfoData","records","server","axios","get","response","Loading","Container","fluid","Row","className","Col","md","DateRangePicker","start","end","min","max","onStartChanged","onEndChanged","firtsTitle","secondTitle","dateFormat","selected","onChange","minDate","maxDate","CustomPagination","props","initialPage","forcePage","pageCount","pageRangeDisplayed","marginPagesDisplayed","previousLabel","breakLabel","nextLabel","containerClassName","previousClassName","undefined","pageClassName","activeClassName","disabledClassName","breakClassName","nextClassName","previousLinkClassName","pageLinkClassName","activeLinkClassName","breakLinkClassName","nextLinkClassName","onPageChange","GetSortDirection","sortDirection","toUpperCase","CompareStrings","a","b","localeCompare","CompareNumbers","parsedA","parseFloat","parsedB","isANaN","isNaN","isBNaN","CompareDates","SortBy","comparer","optional","GetKey","hasOwnProperty","value","field","GetParsedKey","valueParser","GetCovidInfoDate","covidInfo","Date","UTC","year","month","day","IsDateInRange","target","from","to","inclusive","ValidateNumber","number","parsedNumber","Number","nanValue","isFinite","infValue","GetFraction","allCount","targetCount","NaN","RoundNumber","Math","round","VALIDATION_SPECIAL_CASES","CountryCovidInfo","options","country","cases","deaths","allCases","allDeaths","popData2019","columns","key","name","type","defaultFilterField","initialSortType","columnKey","direction","CovidTable","covidInfos","startDate","endDate","useState","countryCovidInfo","SetCountryCovidInfo","sortType","SetSortType","searchQuery","SetSearchQuery","filterField","SetFilterField","filterValueFrom","SetFilterValueFrom","filterValueTo","SetFilterValueTo","pageIndex","SetPageIndex","useEffect","infos","log","length","groups","forEach","info","isInfoDateInDateRange","foundGroup","find","group","countriesAndTerritories","push","GetCountryCovidInfos","i","splice","RemoveOutOfDateRangeGroups","SetupCountryCovidInfos","sortedGroupedCovidInfos","useMemo","compareFunction","column","sortField","sort","OnSort","searchedSortedGroupedCovidInfos","filter","toLowerCase","indexOf","filteredSearchedSortedGroupedCovidInfos","parsedFrom","parsedTo","Infinity","ResetFilters","allItemCount","itemCountPerPage","ceil","pagedFilteredSearchedSortedGroupedCovidInfos","_","index","itemIndex","IsItemInPage","RenderEmptyRow","style","textAlign","padding","placeholder","event","id","Form","Select","map","Button","variant","onClick","rows","defaultColumnOptions","resizable","sortable","sortColumns","onSortColumnsChange","noRowsFallback","GetChartData","labels","dataset1","dataset2","datasets","label","borderColor","backgroundColor","cubicInterpolationMode","tension","borderWidth","pointRadius","pointHoverRadius","responsive","plugins","legend","position","title","display","text","interaction","mode","intersect","scales","x","y","DEFAULT_COUNTRY_FILTER","GetGroupedCovidInfoByDate","countryFilter","CheckCountryFilter","infoDate","date","getTime","parsedCases","parsedDeaths","CovidChart","SetCountryFilter","countryList","uniqueCountryList","Set","add","Array","GetCountyList","groupedCovidInfoByDate","infoInDateRange","chartData","toISOString","split","Group","as","Label","sm","App","SetMinDate","SetMaxDate","SetStartDate","SetEndDate","onStartDateChanged","onEndDateChanged","SetCovidInfos","tabKey","SetTabKey","callback","isLoading","SetIsLoading","fetchError","SetFetchError","useFetching","GetData","FetchCovidInfo","isCovidInfoLoading","fetchingCovidInfoError","current","SetupCovidInfosDateLimits","Alert","Tabs","activeKey","onSelect","unmountOnExit","Tab","eventKey","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3a0a69f.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport covidInfoData from \"./localCovidInfos.json\";\r\n\r\n\r\nconst PROXY_SERVER = \"http://localhost:3001\";\r\nconst API_SERVER = \"https://opendata.ecdc.europa.eu/covid19/casedistribution/json/\";\r\n\r\n\r\nexport default class CovidInfoService {\r\n\r\n    static async GetData() {\r\n        try {\r\n            const data = await this.GetDataFromServer(API_SERVER);\r\n            console.warn(\"Covid data from API server was loaded successfully.\");\r\n            return data;\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n\r\n            try {\r\n                const data = await this.GetDataFromServer(PROXY_SERVER);\r\n                console.warn(\"Covid data from proxy server was loaded successfully.\");\r\n                return data;\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n\r\n                try {\r\n                    const data = await this.GetDataFromLocal();\r\n                    console.warn(\"Local Covid data is used.\");\r\n                    return data;\r\n                }\r\n                catch (e) {\r\n                    throw \"Error, trying to fetch data.\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    static async GetDataFromLocal() {\r\n        return await covidInfoData.records;\r\n    }\r\n\r\n\r\n    static async GetDataFromServer(server) {\r\n        try {\r\n            const response = await axios.get(server);\r\n            return response.data.records;\r\n        }\r\n        catch (e) {\r\n            throw `Cannot access to server (${server}).`;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n  // const reversedProxyServer = \"http://localhost:3000\";\r\n\r\n  // //#region Fetch Covid Infos\r\n  // useEffect(() => SetupCovidInfos(), []);\r\n\r\n  // async function SetupCovidInfos() {\r\n  //   console.log(\"Fetch Covid Infos\");\r\n  //   const data = await GetCovidInfos();\r\n  //   const uniqueInfos = data.records.map((info, index) => ({ id: index, ...info}));\r\n  //   SetCovidInfos(uniqueInfos);\r\n  // }\r\n\r\n  // async function GetCovidInfos() {\r\n  //   const response = await axios.get(reversedProxyServer);\r\n  //   return response.data;\r\n  // }\r\n  // //#endregion\r\n\r\n\r\n","import Container from 'react-bootstrap/Container'\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\n\r\nexport default function Loading() {\r\n    \r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"justify-content-center\">\r\n            <Col md=\"auto\">\r\n                <div className=\"lds-facebook justify-content-center\"><div></div><div></div><div></div></div>\r\n            </Col>\r\n            </Row>\r\n\r\n            <Row className=\"justify-content-center\">\r\n            <Col md=\"auto\">\r\n                <h1>Loading</h1>\r\n            </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n\r\nfunction DateRangePicker({start, end, min, max, onStartChanged, onEndChanged, firtsTitle, secondTitle}) {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n        <label className=\"col-md-auto col-form-label\">{firtsTitle}</label>\r\n        <div className=\"col-md-auto\">\r\n          <ReactDatePicker\r\n            className=\"form-control\"\r\n            dateFormat=\"dd/MM/yyyy\"\r\n            selected={start}\r\n            onChange={onStartChanged}\r\n            minDate={min}\r\n            maxDate={end}\r\n          />\r\n        </div>\r\n\r\n\r\n        <label className=\"col-md-auto col-form-label\">{secondTitle}</label>\r\n        <div className=\"col-md-auto\">\r\n        <ReactDatePicker\r\n          className=\"form-control\"\r\n          dateFormat=\"dd/MM/yyyy\"\r\n          selected={end}\r\n          onChange={onEndChanged}\r\n          minDate={start}\r\n          maxDate={max}\r\n        />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DateRangePicker;\r\n","import React from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\n\r\n\r\nfunction CustomPagination(props) {\r\n\r\n    return (\r\n        <ReactPaginate\r\n            initialPage={props.initialPage}\r\n            forcePage={props.initialPage}\r\n            pageCount={props.pageCount}\r\n            pageRangeDisplayed={5}\r\n            marginPagesDisplayed={1}\r\n\r\n            previousLabel={props.pageCount < 3 ? \"\" : \"<<\"}\r\n            breakLabel={\"...\"}\r\n            nextLabel={props.pageCount < 3 ? \"\" : \">>\"}\r\n\r\n            containerClassName={\"pagination justify-content-end mb-0\"}\r\n\r\n            previousClassName={props.pageCount < 3 ? undefined : \"page-item\"}\r\n            pageClassName={\"page-item\"}\r\n            activeClassName={\"page-item active\"}\r\n            disabledClassName={\"page-item disable\"}\r\n            breakClassName={\"page-item\"}\r\n            nextClassName={props.pageCount < 3 ? undefined : \"page-item\"}\r\n\r\n            previousLinkClassName={props.pageCount < 3 ? undefined : \"page-link\"}\r\n            pageLinkClassName={\"page-link\"}\r\n            activeLinkClassName={\"page-link\"}\r\n            breakLinkClassName={\"page-link\"}\r\n            nextLinkClassName={props.pageCount < 3 ? undefined : \"page-link\"}\r\n\r\n            onPageChange={props.onPageChange}\r\n        />\r\n    );\r\n}\r\n\r\n\r\nexport default CustomPagination;\r\n","\r\n\r\nexport function GetSortDirection(sortDirection) {\r\n    if (typeof sortDirection === \"string\")\r\n        sortDirection = sortDirection.toUpperCase();\r\n\r\n    if (sortDirection === 1 || sortDirection === \"1\" || sortDirection === \"ASC\" || sortDirection === \"ASCENDING\")\r\n        return 1;\r\n    else if (sortDirection === -1 || sortDirection === \"-1\" || sortDirection === \"DESC\" || sortDirection === \"DESCENDING\")\r\n        return -1;\r\n    else\r\n        return 1;\r\n}\r\n\r\n\r\nexport function CompareStrings(a, b) {\r\n    return a.localeCompare(b);\r\n}\r\n\r\n\r\nexport function CompareNumbers(a, b) {\r\n    const parsedA = parseFloat(a);\r\n    const parsedB = parseFloat(b);\r\n\r\n    const isANaN = isNaN(parsedA);\r\n    const isBNaN = isNaN(parsedB);\r\n\r\n    if (isANaN && isBNaN)\r\n        return 0;\r\n    else if (isANaN)\r\n        return -1;\r\n    else if (isBNaN)\r\n        return 1;\r\n    else\r\n        return a < b ? -1 : (b < a ? 1 : 0);\r\n}\r\n\r\n\r\nexport function CompareDates(a, b) {\r\n    if (a < b)\r\n        return -1;\r\n    else if (a > b)\r\n        return 1;\r\n    else\r\n        return 0;\r\n}\r\n\r\n\r\n/**\r\n * @param {*} comparer Function to compare some values.\r\n * @param {*} sortDirection Direction to sort: -1 or 1\r\n * @param {*} optional Optional parametr - object with possible properties: {field: #, valueParser: #}; [field] - object field to sort by; [valueParser] - function to parse value;\r\n * @returns Target object comparison function.\r\n */\r\nexport function SortBy(comparer, sortDirection, optional) {\r\n    const GetKey = optional !== undefined && optional.hasOwnProperty(\"field\")\r\n    ? (value) => value[optional.field]\r\n    : (value) => value;\r\n\r\n    const GetParsedKey = optional !== undefined && optional.hasOwnProperty(\"valueParser\")\r\n        ? (value) => optional.valueParser(GetKey(value))\r\n        : (value) => GetKey(value);\r\n\r\n    return function(a, b) {\r\n        return comparer(GetParsedKey(a), GetParsedKey(b)) * sortDirection;\r\n    }\r\n}\r\n","\r\n\r\nexport function GetCovidInfoDate(covidInfo) {\r\n    return new Date(Date.UTC(covidInfo.year, covidInfo.month - 1, covidInfo.day));\r\n}\r\n\r\n\r\nexport function GetCountyList(covidInfos) {\r\n    let uniqueCountryList = new Set();\r\n    covidInfos.map(info => uniqueCountryList.add(info.countriesAndTerritories));\r\n    return Array.from(uniqueCountryList);\r\n}\r\n","\r\n\r\nexport function IsDateInRange(target, from, to, inclusive) {\r\n    if (inclusive)\r\n        return (from <= target && target <= to) ? true : false;\r\n    else\r\n        return (from < target && target < to) ? true : false;\r\n}\r\n","\r\n\r\n/**\r\n * @description Validating the number to check the cases: Nan, Infinity.\r\n * @param {*} number Target validation number.\r\n * @param {*} optional Optional parametr with values to replace special cases. Object with possible properties: {nanValue: #, infValue: #}.\r\n * @returns Returns number in common cases; NaN/Infinity or custom values in special cases;\r\n */\r\n export function ValidateNumber(number, optional) {\r\n    let parsedNumber = Number.parseFloat(number);\r\n\r\n    if (Number.isNaN(parsedNumber))\r\n        return (optional !== undefined && optional.hasOwnProperty(\"nanValue\")) ? optional.nanValue : parsedNumber;\r\n    else if (Number.isFinite(parsedNumber) === false)\r\n        return (optional !== undefined && optional.hasOwnProperty(\"infValue\")) ? optional.infValue : parsedNumber;\r\n    else\r\n        return number;\r\n}\r\n","import { ValidateNumber } from \"../utils/validationUtils\";\r\n\r\n\r\nfunction GetFraction(value, allCount, targetCount) {\r\n    value = Number.parseFloat(value);\r\n    allCount = Number.parseFloat(allCount);\r\n    targetCount = Number.parseFloat(targetCount);\r\n\r\n    if (isNaN(value) || isNaN(allCount) || isNaN(targetCount))\r\n        return NaN;\r\n    else\r\n        return value / allCount * targetCount;\r\n}\r\n\r\n\r\nfunction RoundNumber(number) {\r\n    return Math.round(number * 1000) / 1000;\r\n}\r\n\r\n\r\nconst VALIDATION_NAN_VALUE = \"Нет данных\";\r\nconst VALIDATION_INF_VALUE = 0;\r\nconst VALIDATION_SPECIAL_CASES = {nanValue: VALIDATION_NAN_VALUE, infValue: VALIDATION_INF_VALUE};\r\n\r\n\r\nexport default class CountryCovidInfo {\r\n\r\n    #country;\r\n    #cases;\r\n    #deaths;\r\n    #allCases;\r\n    #allDeaths;\r\n    #popData2019;\r\n\r\n\r\n    constructor(options) {\r\n        this.#country = options.country;\r\n        this.#cases = ValidateNumber(options.cases, VALIDATION_SPECIAL_CASES);\r\n        this.#deaths = ValidateNumber(options.deaths, VALIDATION_SPECIAL_CASES);\r\n        this.#allCases = ValidateNumber(options.allCases, VALIDATION_SPECIAL_CASES);\r\n        this.#allDeaths = ValidateNumber(options.allDeaths, VALIDATION_SPECIAL_CASES);\r\n        this.#popData2019 = ValidateNumber(options.popData2019, VALIDATION_SPECIAL_CASES);\r\n    }\r\n\r\n\r\n    set country(value) {\r\n        this.#country = value;\r\n    }\r\n\r\n    get country() {\r\n        return this.#country;\r\n    }\r\n\r\n\r\n    set cases(value) {\r\n        this.#cases = ValidateNumber(value, VALIDATION_SPECIAL_CASES);\r\n    }\r\n\r\n    get cases() {\r\n        return this.#cases;\r\n    }\r\n\r\n\r\n    set deaths(value) {\r\n        this.#deaths = ValidateNumber(value, VALIDATION_SPECIAL_CASES);\r\n    }\r\n\r\n    get deaths() {\r\n        return this.#deaths;\r\n    }\r\n\r\n\r\n    set allCases(value) {\r\n        this.#allCases = ValidateNumber(value, VALIDATION_SPECIAL_CASES);\r\n    }\r\n\r\n    get allCases() {\r\n        return this.#allCases;\r\n    }\r\n\r\n\r\n    set allDeaths(value) {\r\n        this.#allDeaths = ValidateNumber(value, VALIDATION_SPECIAL_CASES);\r\n    }\r\n\r\n    get allDeaths() {\r\n        return this.#allDeaths;\r\n    }\r\n\r\n\r\n    set popData2019(value) {\r\n        this.#popData2019 = ValidateNumber(value, VALIDATION_SPECIAL_CASES);\r\n    }\r\n\r\n    get popData2019() {\r\n        return this.#popData2019;\r\n    }\r\n\r\n\r\n    get casesPer1000() {\r\n        return ValidateNumber(RoundNumber(GetFraction(this.#cases, this.#popData2019, 1000)), VALIDATION_SPECIAL_CASES);\r\n    }\r\n\r\n    get deathsPer1000() {\r\n        return ValidateNumber(RoundNumber(GetFraction(this.#deaths, this.#popData2019, 1000)), VALIDATION_SPECIAL_CASES);\r\n    }\r\n}\r\n","import React, {useEffect, useState, useMemo} from \"react\";\r\n\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nimport CustomPagination from \"./CustomPagination\";\r\n\r\nimport { SortBy, GetSortDirection, CompareNumbers, CompareStrings } from \"../utils/sortUtils\";\r\nimport { GetPageCount, IsItemInPage } from \"../utils/paginationUtils\";\r\n// import { ValidateNumber } from \"../utils/validationUtils\";\r\nimport { GetCovidInfoDate } from \"../utils/covidInfoUtils\";\r\nimport { IsDateInRange } from \"../utils/dateUtils\";\r\n\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\nimport CountryCovidInfo from \"../classes/CountryCovidInfo\";\r\n\r\n\r\nconst columns = [\r\n    {\r\n        key: \"country\",\r\n        name: \"Страна\",\r\n        type: \"string\",\r\n    },\r\n    {\r\n        key: \"cases\",\r\n        name: \"Количество случаев\",\r\n        type: \"number\",\r\n    },\r\n    {\r\n        key: \"deaths\",\r\n        name: \"Количество смертей\",\r\n        type: \"number\",\r\n    },\r\n    {\r\n        key: \"allCases\",\r\n        name: \"Количество случаев всего\",\r\n        type: \"number\",\r\n    },\r\n    {\r\n        key: \"allDeaths\",\r\n        name: \"Количество смертей всего\",\r\n        type: \"number\",\r\n    },\r\n    {\r\n        key: \"casesPer1000\",\r\n        name: \"Количество случаев на 1000 житилей\",\r\n        type: \"number\",\r\n    },\r\n    {\r\n        key: \"deathsPer1000\",\r\n        name: \"Количество смертей на 1000 житилей\",\r\n        type: \"number\",\r\n    },\r\n];\r\n\r\n\r\nfunction GetColumnType(key) {\r\n    const columnByKey = columns.find(column => column.key === key);\r\n    return columnByKey.type;\r\n}\r\n\r\nconst EMPTY_ROW_TITLE = \"Ничего не найдено\";\r\n\r\nconst defaultFilterField = {key: \"default\", name: \"Фильтровать по полю...\", type: \"number\",};\r\nconst initialSortType = [{ columnKey: 'country', direction: 'ASC' }];\r\n\r\nconst FIELD_FILTER_INPUT_FROM_PLACE_HOLDER = \"значение от\";\r\nconst FIELD_FILTER_INPUT_TO_PLACE_HOLDER = \"значение до\";\r\nconst SEARCH_FILTER_PLACE_HOLDER = \"Поиск страны...\";\r\nconst FILTER_RESET_TITLE = \"Сбросить фильтры\";\r\n\r\n\r\nfunction GetCountryCovidInfos(infos, startDate, endDate) {\r\n    let groups = [];\r\n\r\n\r\n    infos.forEach(info => {\r\n        let infoDate = GetCovidInfoDate(info);\r\n        let isInfoDateInDateRange = IsDateInRange(infoDate, startDate, endDate, true);\r\n        let foundGroup = groups.find(group => group.country === info.countriesAndTerritories);\r\n\r\n        if (foundGroup !== undefined) {\r\n            if (isInfoDateInDateRange) {\r\n                foundGroup.cases += info.cases;\r\n                foundGroup.deaths += info.deaths;\r\n            }\r\n            foundGroup.allCases += info.cases;\r\n            foundGroup.allDeaths += info.deaths;\r\n        }\r\n        else {\r\n            groups.push(new CountryCovidInfo({\r\n                country: info.countriesAndTerritories,\r\n                cases: isInfoDateInDateRange ? info.cases : 0,\r\n                deaths: isInfoDateInDateRange ? info.deaths : 0,\r\n                allCases: info.cases,\r\n                allDeaths: info.deaths,\r\n                popData2019: info.popData2019,\r\n            }));\r\n        }\r\n\r\n    });\r\n\r\n    return groups;\r\n}\r\n\r\n\r\n// Remove out of date range groups (groups without statistics (groups with zero cases and zero deaths))\r\nfunction RemoveOutOfDateRangeGroups(groups) {\r\n    \r\n    for (var i = groups.length - 1; i >= 0; i--) {\r\n        if (groups[i].cases === 0 && groups[i].deaths === 0) {\r\n        groups.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction CovidTable({covidInfos, startDate, endDate}) {\r\n    \r\n    const [countryCovidInfo, SetCountryCovidInfo] = useState([]);\r\n    const [sortType, SetSortType] = useState(initialSortType);\r\n    const [searchQuery, SetSearchQuery] = useState(\"\");\r\n    const [filterField, SetFilterField] = useState(defaultFilterField.key);\r\n    const [filterValueFrom, SetFilterValueFrom] = useState(\"\");\r\n    const [filterValueTo, SetFilterValueTo] = useState(\"\");\r\n    const [pageIndex, SetPageIndex] = useState(0);\r\n    const itemsCountPerPage = 20;\r\n    \r\n\r\n    //#region Country Covid Infos Setup\r\n    useEffect(() => SetupCountryCovidInfos(covidInfos, startDate, endDate), [covidInfos, startDate, endDate]);\r\n    \r\n    function SetupCountryCovidInfos(infos, startDate, endDate) {\r\n        console.log(\"Group Covid Infos By Country Name\");\r\n        \r\n        if (infos.length === 0)\r\n            return;\r\n\r\n        let groups = GetCountryCovidInfos(infos, startDate, endDate);\r\n        RemoveOutOfDateRangeGroups(groups);\r\n        SetCountryCovidInfo(groups);\r\n    }\r\n    //#endregion\r\n\r\n\r\n    //#region Sort Setup\r\n    const sortedGroupedCovidInfos = useMemo(() => {\r\n        if (sortType.length > 0) {\r\n            console.log(\"Sort Covid Groups\");\r\n\r\n            const compareFunction = (GetColumnType(sortType[0].columnKey) === \"number\") ? CompareNumbers : CompareStrings;\r\n            const sortDirection = sortType[0].direction;\r\n            const sortField = {field:sortType[0].columnKey};\r\n            return [...countryCovidInfo].sort(SortBy(compareFunction, GetSortDirection(sortDirection), sortField));\r\n        }\r\n        else\r\n            return countryCovidInfo;\r\n    }, [countryCovidInfo, sortType]);\r\n\r\n\r\n    function OnSort(sortType) {\r\n      SetSortType(sortType);\r\n    }\r\n    //#endregion\r\n\r\n\r\n    //#region Search Setup\r\n    const searchedSortedGroupedCovidInfos = useMemo(() => {\r\n        if (searchQuery !== \"\") {\r\n            console.log(\"Setup Groups In Search Query\");\r\n\r\n            return sortedGroupedCovidInfos.filter(\r\n                group => group.countriesAndTerritories.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1\r\n            );\r\n        }\r\n        else\r\n            return sortedGroupedCovidInfos;\r\n    }, [sortedGroupedCovidInfos, searchQuery]);\r\n    //#endregion\r\n\r\n\r\n    //#region Filter Setup\r\n    const filteredSearchedSortedGroupedCovidInfos = useMemo(() => {\r\n        if (filterField !== defaultFilterField.key) {\r\n            console.log(\"Filter Groups\");\r\n\r\n            const parsedFrom = parseFloat(filterValueFrom);\r\n            const parsedTo = parseFloat(filterValueTo);\r\n            const from = isNaN(parsedFrom) ? -Infinity : parsedFrom;\r\n            const to = isNaN(parsedTo) ? Infinity : parsedTo;\r\n\r\n            return searchedSortedGroupedCovidInfos.filter(\r\n                group => (from <= group[filterField] && group[filterField] <= to)\r\n            );\r\n        }\r\n        else\r\n            return searchedSortedGroupedCovidInfos;\r\n    }, [searchedSortedGroupedCovidInfos, filterField, filterValueFrom, filterValueTo]);\r\n\r\n\r\n    function ResetFilters() {\r\n        SetSortType(initialSortType);\r\n        SetSearchQuery(\"\");\r\n        SetFilterField(defaultFilterField.key);\r\n        SetFilterValueFrom(\"\");\r\n        SetFilterValueTo(\"\");\r\n    }\r\n    //#endregion\r\n\r\n\r\n    //#region Pages Setup\r\n    const pageCount = useMemo(() => {\r\n        return GetPageCount(filteredSearchedSortedGroupedCovidInfos.length, itemsCountPerPage);\r\n\r\n    }, [filteredSearchedSortedGroupedCovidInfos]);\r\n    \r\n\r\n    useEffect(() => {\r\n        if (pageCount > 0 && pageIndex >= pageCount) {\r\n            console.log(\"Limit page index\");\r\n\r\n            SetPageIndex(pageCount - 1);\r\n        }\r\n    }, [pageCount])\r\n\r\n\r\n    const pagedFilteredSearchedSortedGroupedCovidInfos = useMemo(() => {\r\n\r\n        return filteredSearchedSortedGroupedCovidInfos.filter((_, index) => \r\n            IsItemInPage(index, pageIndex, itemsCountPerPage)\r\n        )\r\n    }, [filteredSearchedSortedGroupedCovidInfos, pageIndex]);\r\n    //#endregion\r\n\r\n\r\n    //#region Renderers\r\n    function RenderEmptyRow() {\r\n        return (\r\n            <div style={{ textAlign: \"center\", padding: \"12px\" }}>\r\n                {EMPTY_ROW_TITLE}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    function RenderSearch() {\r\n        return (\r\n            <div className=\"col-md-auto mb-3\">\r\n                <div className=\"input-group\">\r\n                    <input type=\"text\" className=\"form-control\" placeholder={SEARCH_FILTER_PLACE_HOLDER} value={searchQuery} onChange={event => SetSearchQuery(event.target.value)}/>\r\n                    <span className=\"input-group-text\" id=\"basic-addon1\">\r\n                        <i className=\"bi bi-search\"/>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    function RenderFilterField() {\r\n        return (\r\n            <div className=\"col-md mb-1\">\r\n                <Form.Select className=\"me-3\" value={filterField} onChange={event => SetFilterField(event.target.value)}>\r\n                    {[defaultFilterField, ...columns].map((field, index) => {\r\n                        if (field.type === \"number\")\r\n                            return <option key={index} value={field.key}>{field.name}</option>\r\n                        else\r\n                            return;\r\n                    })}\r\n                </Form.Select>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    function RenderFilterRangeInput() {\r\n        return (\r\n            <>\r\n                <div className=\"col-md mb-1\">\r\n                    <input\r\n                        type=\"number\"\r\n                        className=\"form-control\"\r\n                        placeholder={FIELD_FILTER_INPUT_FROM_PLACE_HOLDER}\r\n                        value={filterValueFrom}\r\n                        onChange={event => SetFilterValueFrom(event.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md\">\r\n                    <input\r\n                        type=\"number\"\r\n                        className=\"form-control\"\r\n                        placeholder={FIELD_FILTER_INPUT_TO_PLACE_HOLDER}\r\n                        value={filterValueTo}\r\n                        onChange={event => SetFilterValueTo(event.target.value)}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    function RenderFilterGroup() {\r\n        return (\r\n            <>\r\n                <div className=\"row\">\r\n                    {RenderSearch()}\r\n\r\n                    <div className=\"col-md mb-2\">\r\n                        <div className=\"row\">\r\n                            {RenderFilterField()}\r\n\r\n                            {RenderFilterRangeInput()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"d-flex flex-row-reverse mb-3\">\r\n                    <div className=\"col-md-auto\">\r\n                        <Button variant=\"warning\" onClick={ResetFilters}>{FILTER_RESET_TITLE}</Button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    function RenderGrid() {\r\n        return (\r\n            <div className=\"mb-3\">\r\n                <ReactDataGrid\r\n                    columns={columns}\r\n                    rows={pagedFilteredSearchedSortedGroupedCovidInfos}\r\n                    defaultColumnOptions={{\r\n                    resizable: true,\r\n                    sortable: true,\r\n                    }}\r\n                    sortColumns={sortType}\r\n                    onSortColumnsChange={OnSort}\r\n                    noRowsFallback={<RenderEmptyRow/>}\r\n                    className=\"rdg-light\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    function RenderPagination() {\r\n        return (\r\n            <div className=\"d-flex flex-row-reverse\">\r\n                <CustomPagination\r\n                    initialPage={pageIndex}\r\n                    forcePage={pageIndex}\r\n                    pageCount={pageCount}\r\n                    onPageChange={pageIndex => SetPageIndex(pageIndex.selected)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    //#endregion\r\n\r\n\r\n    console.log(\"Render CovidTable\");\r\n    return (\r\n        <>\r\n            {RenderFilterGroup()}\r\n            {RenderGrid()}\r\n            {RenderPagination()}\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default CovidTable;\r\n","\r\n\r\nexport function GetPageCount(allItemCount, itemCountPerPage) {\r\n    return Math.ceil(allItemCount / itemCountPerPage);\r\n}\r\n\r\n\r\nexport function IsItemInPage(itemIndex, pageIndex, itemCountPerPage) {\r\n    return ((itemIndex >= pageIndex * itemCountPerPage) && (itemIndex < (pageIndex + 1) * itemCountPerPage));\r\n}\r\n","import React, { useMemo, useState } from \"react\";\r\n\r\nimport { Line } from 'react-chartjs-2';\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { IsDateInRange } from \"../utils/dateUtils\";\r\nimport { GetCountyList, GetCovidInfoDate } from \"../utils/covidInfoUtils\";\r\nimport { SortBy, CompareStrings, CompareDates, GetSortDirection } from \"../utils/sortUtils\";\r\n\r\n\r\nfunction GetChartData(labels, dataset1, dataset2) {\r\n    return (\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: \"Заболевания\",\r\n                    data: dataset1,\r\n                    borderColor: \"#f1c40f\",\r\n                    backgroundColor: \"#f39c12\",\r\n                    cubicInterpolationMode: 'monotone',\r\n                    tension: 0.4,\r\n                    borderWidth: 1,\r\n                    pointRadius: 1,\r\n                    pointHoverRadius: 4,\r\n                },\r\n                {\r\n                    label: \"Смерти\",\r\n                    data: dataset2,\r\n                    borderColor: \"#e74c3c\",\r\n                    backgroundColor: \"#c0392b\",\r\n                    cubicInterpolationMode: 'monotone',\r\n                    tension: 0.4,\r\n                    borderWidth: 1,\r\n                    pointRadius: 1,\r\n                    pointHoverRadius: 4,\r\n                },\r\n            ],\r\n        }\r\n    );\r\n}\r\n\r\n\r\nconst options = {\r\n    responsive: true,\r\n\r\n    plugins: {\r\n        legend: {\r\n          position: 'top',\r\n        },\r\n        title: {\r\n          display: false,\r\n          text: \"Chart Name\",\r\n        },\r\n    },\r\n\r\n    interaction: {\r\n        mode: 'index',\r\n        intersect: false,\r\n    },\r\n\r\n    scales: {\r\n        x: {\r\n            display: true,\r\n            title: {\r\n                display: true,\r\n                text: \"Период\",\r\n            }\r\n        },\r\n        y: {\r\n            display: true,\r\n            title: {\r\n                display: true,\r\n                text: \"Случаи\",\r\n            }\r\n        },\r\n    }\r\n};\r\n\r\nexport const ALL_COUNTRY_FILTER = \"\";\r\nconst DEFAULT_COUNTRY_FILTER = {value: ALL_COUNTRY_FILTER, name: \"Все страны...\"};\r\n\r\n\r\n\r\n// Group Covid Infos By Date:\r\nfunction GetGroupedCovidInfoByDate(covidInfos, countryFilter) {\r\n    let groups = [];\r\n\r\n\r\n    covidInfos.forEach(info => {\r\n        if (CheckCountryFilter(info.countriesAndTerritories, countryFilter) === false)\r\n            return;\r\n\r\n        const infoDate = GetCovidInfoDate(info);\r\n\r\n        const foundGroup = groups.find(group => group.date.getTime() === infoDate.getTime());\r\n\r\n        const parsedCases = parseFloat(info.cases);\r\n        const parsedDeaths = parseFloat(info.deaths);\r\n\r\n        if (foundGroup !== undefined) {\r\n            foundGroup.cases += isNaN(parsedCases) ? 0: parsedCases;\r\n            foundGroup.deaths += isNaN(parsedDeaths) ? 0: parsedDeaths;\r\n        }\r\n        else {\r\n            groups.push({\r\n                date: infoDate,\r\n                cases: isNaN(parsedCases) ? 0: parsedCases,\r\n                deaths: isNaN(parsedDeaths) ? 0: parsedDeaths,\r\n            });\r\n        }\r\n    });\r\n\r\n    groups.sort(SortBy(CompareDates, GetSortDirection(\"ASC\"), {field: \"date\"}));\r\n    return groups;\r\n}\r\n\r\n\r\nfunction CheckCountryFilter(country, countryFilter) {\r\n    if (countryFilter === ALL_COUNTRY_FILTER)\r\n        return true;\r\n    else\r\n        return country === countryFilter;\r\n}\r\n\r\n\r\nfunction CovidChart({covidInfos, startDate, endDate}) {\r\n\r\n    const [countryFilter, SetCountryFilter] = useState(DEFAULT_COUNTRY_FILTER.value);\r\n    const countryList = useMemo(() => GetCountyList(covidInfos).sort(SortBy(CompareStrings, GetSortDirection(\"ASC\"))), [covidInfos]);\r\n\r\n    const groupedCovidInfoByDate = useMemo(() => {\r\n        if (covidInfos === undefined)\r\n            return undefined;\r\n        else {\r\n            console.log(\"groupedCovidInfoByDate\");\r\n\r\n            return GetGroupedCovidInfoByDate(covidInfos, countryFilter);\r\n        }\r\n    }, [covidInfos, countryFilter]);\r\n\r\n\r\n    const infoInDateRange = useMemo(() => {\r\n        if (groupedCovidInfoByDate === undefined)\r\n            return undefined;\r\n        else {\r\n            console.log(\"infoInDateRange\");\r\n\r\n            return groupedCovidInfoByDate.filter(group => \r\n                IsDateInRange(group.date, startDate, endDate, true)\r\n            );\r\n        }\r\n    }, [groupedCovidInfoByDate, startDate, endDate])\r\n\r\n\r\n    const chartData = useMemo(() => {\r\n\r\n        if (infoInDateRange === undefined)\r\n            return GetChartData([], [], []);\r\n        else {\r\n            console.log(\"chartData\");\r\n            \r\n            return GetChartData(\r\n                infoInDateRange.map(group => group.date.toISOString().split('T')[0]),\r\n                infoInDateRange.map(group => group.cases),\r\n                infoInDateRange.map(group => group.deaths)\r\n            );\r\n        }\r\n    }, [infoInDateRange]);\r\n\r\n\r\n    console.log(\"Render Covid Chart\");\r\n    return (\r\n        <>\r\n            <Form className=\"m-3\">\r\n                <Form.Group as={Row} className=\"\">\r\n                    <Form.Label column sm=\"auto\">\r\n                        Страна\r\n                    </Form.Label>\r\n                    <Col sm=\"auto\">\r\n                        <Form.Select value={countryFilter} onChange={event => SetCountryFilter(event.target.value)}>\r\n                            <option key={-1} value={DEFAULT_COUNTRY_FILTER.value}>{DEFAULT_COUNTRY_FILTER.name}</option>\r\n                            {countryList.map((country, index) => <option key={index} value={country}>{country}</option>)}\r\n                        </Form.Select>\r\n                    </Col>\r\n                </Form.Group>\r\n            </Form>\r\n\r\n            \r\n            <Line\r\n                type=\"line\"\r\n                data={chartData}\r\n                options={options}\r\n            />\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default CovidChart;\r\n","import React, { useState, useEffect } from \"react\";\nimport useFetching from \"./hooks/useFetching\";\n\nimport CovidInfoService from \"./API/CovidInfoService\";\n\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Alert from \"react-bootstrap/Alert\";\nimport Loading from \"./components/Loading\";\nimport DateRangePicker from \"./components/DateRangePicker\";\nimport CovidTable from \"./components/CovidTable\";\nimport CovidChart from \"./components/CovidChart\";\n\nimport {GetCovidInfoDate} from \"./utils/covidInfoUtils\";\nimport { CompareDates } from \"./utils/sortUtils\";\n\nimport \"./styles/loading.css\";\n\n\nfunction SetupCovidInfosDateLimits(infos) {\n  if (infos === undefined || infos === null || infos.length === 0)\n    return [new Date(), new Date()];\n\n  let min = GetCovidInfoDate(infos[0]);\n  let max = GetCovidInfoDate(infos[0]);\n  let current;\n\n  for (var i = 1; i < infos.length; i++)\n  {\n    current = GetCovidInfoDate(infos[i]);\n\n    if (CompareDates(current, min) === -1)\n      min = current;\n\n    if (CompareDates(current, max) === 1)\n      max = current;\n  }\n\n  return [min, max];\n}\n\n\nconst DATE_RANGE_FIRST_TITLE = \"Период от\";\nconst DATE_RANGE_SECOND_TITLE = \"до\";\n\nconst TAB_TABLE_TITLE = \"Таблица\";\nconst TAB_CHART_TITLE = \"График\";\n\n\nfunction App() {\n\n  const [minDate, SetMinDate] = useState(new Date());\n  const [maxDate, SetMaxDate] = useState(new Date());\n\n  const [startDate, SetStartDate] = useState(new Date());\n  const [endDate, SetEndDate] = useState(new Date());\n  \n  const onStartDateChanged = (date) => SetStartDate(date);\n  const onEndDateChanged = (date) => SetEndDate(date);\n\n  const [covidInfos, SetCovidInfos] = useState([]);\n  const [tabKey, SetTabKey] = useState(\"table\");\n\n\n  //#region Fetching\n  const [FetchCovidInfo, isCovidInfoLoading, fetchingCovidInfoError] = useFetching(async () => {\n    const data = await CovidInfoService.GetData();\n    SetCovidInfos(data);\n  })\n\n\n  useEffect(() => {\n    FetchCovidInfo()\n  }, []);\n  //#endregion\n\n\n  //#region Date Range & Limits Setup\n  useEffect(() => {\n    if (covidInfos === undefined || covidInfos === null || covidInfos.length === 0)\n      return;\n\n    const [min, max] = SetupCovidInfosDateLimits(covidInfos);\n    SetMinDate(min);\n    SetMaxDate(max);\n    SetStartDate(min);\n    SetEndDate(max);\n  }, [covidInfos]);\n  //#endregion\n\n\n  //#region Renderers\n  function RenderDateRange() {\n\n    return (\n      <div className=\"row my-3\">\n        <DateRangePicker\n          start={startDate}\n          end={endDate}\n          min={minDate}\n          max={maxDate}\n          onStartChanged={onStartDateChanged}\n          onEndChanged={onEndDateChanged}\n          firtsTitle={DATE_RANGE_FIRST_TITLE}\n          secondTitle={DATE_RANGE_SECOND_TITLE}\n        />\n      </div>\n    );\n  }\n\n\n  function RenderTabs() {\n\n    return (\n      <Tabs\n        id=\"controlled-tab-example\"\n        activeKey={tabKey}\n        onSelect={(key) => SetTabKey(key)}\n        unmountOnExit={false}\n      >\n        <Tab eventKey=\"table\" title={TAB_TABLE_TITLE}>\n          <div className=\"row mx-0 border border-top-0\">\n            <div className=\"col mx-3 my-3\">\n              {tabKey === \"table\" ? <CovidTable covidInfos={covidInfos} startDate={startDate} endDate={endDate}/> : null}\n            </div>\n          </div>\n        </Tab>\n\n        <Tab eventKey=\"chart\" title={TAB_CHART_TITLE}>\n          <div className=\"row mx-0 border border-top-0\">\n            <div className=\"col mb-3\">\n              {tabKey === \"chart\" ? <CovidChart covidInfos={covidInfos} startDate={startDate} endDate={endDate}/> : null}\n            </div>\n          </div>\n        </Tab>\n      </Tabs>\n    );\n  }\n\n\n  function RenderMaster() {\n    if (isCovidInfoLoading)\n      return <Loading/>;\n    else if (fetchingCovidInfoError !== \"\")\n      return <Alert variant={\"danger\"} className=\"my-3 mx-3\">{fetchingCovidInfoError}</Alert>;\n    else\n      return (\n        <div className=\"container\">\n          {RenderDateRange()}\n          {RenderTabs()}\n        </div>\n      );\n  }\n  //#endregion\n\n\n  console.log(\"Render App\");\n  return (\n      RenderMaster()\n  );\n}\n\n\nexport default App;\n","import { useState } from \"react\";\r\n\r\n\r\nexport default function useFetching(callback) {\r\n    const [isLoading, SetIsLoading] = useState(false);\r\n    const [fetchError, SetFetchError] = useState(\"\");\r\n\r\n\r\n    async function Fetching() {\r\n        try {\r\n            SetIsLoading(true);\r\n            await callback();\r\n        }\r\n        catch (e) {\r\n            SetFetchError(e);\r\n        }\r\n        finally {\r\n            SetIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return [Fetching, isLoading, fetchError];\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}